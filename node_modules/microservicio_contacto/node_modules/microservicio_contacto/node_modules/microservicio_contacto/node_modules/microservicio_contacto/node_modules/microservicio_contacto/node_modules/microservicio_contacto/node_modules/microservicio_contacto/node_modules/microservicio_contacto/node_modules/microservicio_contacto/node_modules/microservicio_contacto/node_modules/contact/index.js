import Connection from './lib/connection.js'
import http2 from 'node:http2'

/**
 * @emit "close"
 * @emit "notification"
 * @emit "msg"
 */
class Client extends EventTarget {
  connection
  http2Session
  Connection

  constructor (options = {}) {
    super()
    this.Connection = options.Connection || Connection
  }

  /**
   * Connect, send requests and process responses.
   * @return {Promise}
   * @fulfil {Connection}
   */
  async connect (url) {
    return new Promise((resolve, reject) => {
      const controller = new AbortController()
      const signal = controller.signal
      this.timeoutId = setTimeout(controller.abort.bind(controller), 5000)
      this.http2Session = http2.connect(url, { signal, rejectUnauthorized: false }, async session => {
        clearTimeout(this.timeoutId)
        this.connection = new this.Connection(session)
        await this.connection.listen()

        /* process incoming transmission */
        this.connection.addEventListener('receive', e => {
          this.onReceive(e.detail)
        })
        resolve(this.connection)
      })

      this.http2Session.on('error', cause => {
        clearTimeout(this.timeoutId)
        const err = new Error(`Session failed: ${cause.message}`)
        err.cause = cause
        reject(err)
      })
      this.http2Session.on('close', cause => {
        this.dispatchEvent(new CustomEvent('close', { detail: cause }))
      })
    })
  }

  async onReceive (t) {
    if (['notification'].includes(t.headers.type)) {
      this.notification(t.headers)
    } else if (t.headers.type === 'msg') {
      this.msgReceived(t)
    } else {
      throw new Error('Unrecognised transmission type')
    }
  }

  async close () {
    clearTimeout(this.timeoutId)
    return new Promise((resolve, reject) => {
      if (this.http2Session) {
        if (this.http2Session.destroyed) {
          resolve()
        } else {
          this.http2Session.close(resolve)
          this.http2Session.on('error', reject, { once: true })
        }
      } else {
        /* http2.connect failed */
        resolve()
      }
    })
  }

  async notification (headers) {
    this.dispatchEvent(new CustomEvent('notification', { detail: headers }))
  }

  async msgReceived (t) {
    this.dispatchEvent(new CustomEvent('msg', { detail: t }))
  }
}

export default Client
